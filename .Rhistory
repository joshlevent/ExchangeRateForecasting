source("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting/Exchange Rate Forecasting R.R")
source("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting/Exchange Rate Forecasting R.R")
# ------------------------------------------------------------------------------
# Packages and functions that we need
# ------------------------------------------------------------------------------
library(tsbox)
library(forecast)
library(xts)
library(tsbox)
library(ggplot2)
library(reshape2)
library(dataseries)
library(seasonal)
library(readxl)
library(XML)
library(CADFtest)
library(quantmod)
library(gridExtra)
library(forecast)
# Delete all objects in the memory
rm(list=ls())
# Load user-defined commands and packages
source("UserPackages.R")
# Create results folder
mainDir <- getwd()
outDir <- makeOutDir(mainDir, "/ResultsApp6")
Data <- read.csv("https://fred.stlouisfed.org/graph/fredgraph.csv?bgcolor=%23e1e9f0&chart_type=line&drp=0&fo=open%20sans&graph_bgcolor=%23ffffff&height=450&mode=fred&recession_bars=on&txtcolor=%23444444&ts=12&tts=12&width=1319&nt=0&thu=0&trc=0&show_legend=yes&show_axis_titles=yes&show_tooltip=yes&id=SOFR&scale=left&cosd=2018-04-03&coed=2024-11-09&line_color=%234572a7&link_values=false&line_style=solid&mark_type=none&mw=3&lw=2&ost=-99999&oet=99999&mma=0&fml=a&fq=Daily&fam=avg&fgst=lin&fgsnd=2020-02-01&line_index=1&transformation=lin&vintage_date=2024-11-12&revision_date=2024-11-12&nd=2018-04-03")
outDir <- makeOutDir(mainDir, "/")
Data <- read.csv("https://fred.stlouisfed.org/graph/fredgraph.csv?bgcolor=%23e1e9f0&chart_type=line&drp=0&fo=open%20sans&graph_bgcolor=%23ffffff&height=450&mode=fred&recession_bars=on&txtcolor=%23444444&ts=12&tts=12&width=1319&nt=0&thu=0&trc=0&show_legend=yes&show_axis_titles=yes&show_tooltip=yes&id=SOFR&scale=left&cosd=2018-04-03&coed=2024-11-09&line_color=%234572a7&link_values=false&line_style=solid&mark_type=none&mw=3&lw=2&ost=-99999&oet=99999&mma=0&fml=a&fq=Daily&fam=avg&fgst=lin&fgsnd=2020-02-01&line_index=1&transformation=lin&vintage_date=2024-11-12&revision_date=2024-11-12&nd=2018-04-03")
SOFR   = xts(Data[,2], order.by = as.Date(paste(Data[,1],"-01", sep = "")))
Data <- read.csv("https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn", skip = 5)
SWISSDOLLAR  = xts(Data[,2], order.by = as.Date(paste(Data[,1],"-01", sep = "")))
file_url <- "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
Data <- read.csv(file_url, sep = ";", skip = 3, header = TRUE)
Data[,1] <- as.Date(Data[,1], format = "%d.%m.%Y")
Saron  = xts(Data[,2], order.by = as.Date(paste(Data[,1],"-01", sep = "")))
ERF <- merge(SOFR, Saron, SWISSDOLLAR, all=TRUE)
ERF <- merge(SOFR, Saron, SWISSDOLLAR, all=TRUE)
ERF <- ts_span(ERF, start = "2018")
ERF <- ts_span(ERF, start = "2022", end ="2023") #  If you want to have the graph between 2022 and 2023
plot(ERF)
ERF <-diff(ERF)
plot(ERF)
View(SWISSDOLLAR)
USDCHF  = xts(Data[,2], order.by = as.Date(paste(Data[,1],"-01", sep = "")))
CHFUSD = 1/USDCHF
View(CHFUSD)
View(USDCHF)
# UIP is estimated as log(ExchR_t+1) - log(ExchR_t) = iCH_t - iUS_t
# The exchange rate is expressed as the value of the Swiss Franc in USD
logCHFUSD = log(CHFUSD)
View(logCHFUSD)
CHFUSDint = na.approx(CHFUSD)
View(CHFUSDint)
logCHFUSD = log(CHFUSDint)
plot(CHFUSDint)
Data <- read.csv("https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn", skip = 5)
USDCHF  = xts(Data[,2], order.by = as.Date(paste(Data[,1],"-01", sep = "")))
CHFUSD = 1/USDCHF
Data <- read.csv("https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn", skip = 5)
USDCHF  = xts(Data[,2], order.by = as.Date(paste(Data[,1],"-01", sep = "")))
CHFUSD = 1/USDCHF
Data <- read.csv("https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn", skip = 5)
USDCHF  = xts(Data[,2], order.by = as.Date(paste(Data[,1],"-01", sep = "")))
Data <- read.csv("https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn", skip = 5)
USDCHF  = xts(Data[,2], order.by = as.Date(paste(Data[,1],"-01", sep = "")))
View(CHFUSD)
plot(CHFUSD)
Data <- read.csv("https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn", skip = 5)
USDCHF  = xts(Data[,2], order.by = as.Date(paste(Data[,1],"-01", sep = ",")))
CHFUSD = 1/USDCHF
View(USDCHF)
View(CHFUSD)
Data <- read.csv("https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn", skip = 5)
USDCHF  = xts(Data[,2], order.by = as.Date(paste(Data[,1],"-01", sep = ",")))
plot(USDCHF)
Data
Data <- read.csv("https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn", skip = 5)
View(Data)
Data <- read.csv("https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn", skip = 5, na.strings = "ND")
View(Data)
USDCHF  = xts(Data[,2], order.by = as.Date(paste(Data[,1],"-01", sep = "")))
plot(USDCHF)
CHFUSD = 1/USDCHF
plot(CHFUSD)
# UIP is estimated as log(ExchR_t+1) - log(ExchR_t) = iCH_t - iUS_t
# The exchange rate is expressed as the value of the Swiss Franc in USD
CHFUSDint = na.approx(CHFUSD)
plot(CHFUSDint)
logCHFUSD = log(CHFUSDint)
plot(logCHFUSD)
? ts_diff
? ts_lag
logCHFUSDlag = ts_lag(logCHFUSD, 1)
View(logCHFUSDlag)
View(logCHFUSD)
View(logCHFUSDlag)
View(logCHFUSD)
View(logCHFUSDlag)
View(logCHFUSD)
View(logCHFUSDlag)
View(logCHFUSD)
View(logCHFUSDlag)
source("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting/Exchange Rate Forecasting R.R")
View(logCHFUSD)
View(logCHFUSDlag)
View(logCHFUSD)
View(USDCHF)
View(ERData)
ERData <- read.csv("https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn", skip = 5, na.strings = "ND")
View(ERData)
# Set up dataframe
df$timestamp<-as.POSIXct(df$timestamp,format="%m/%d/%y %H:%M")
library(httr)
library(readr)
library(dplyr)
library(lubridate)
library(zoo)
# Define the URL
url <- "https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn"
# Fetch the data
response <- GET(url)
data <- content(response, "text")
ERData <- read_csv(data, skip = 5, na = "ND", col_names = c('Date', 'Value'))
# Convert Date to Date format and create a sequence of dates
ERData$Date <- as.Date(ERData$Date)
library(httr)
library(readr)
library(dplyr)
library(lubridate)
library(zoo)
# Define the URL
url <- "https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn"
# Fetch the data
response <- GET(url)
data <- content(response, "text")
ERData <- read_csv(data, skip = 5, na = "ND", col_names = c('Date', 'Value'))
View(ERData)
data <- content(response, "text")
?content
data <- content(response, "text", "utf-8")
data <- content(response, "text", encoding = "utf-8")
ERData <- read_csv(data, skip = 6, na = "ND", col_names = c('Date', 'Value'))
# Convert Date to Date format and create a sequence of dates
ERData$Date <- as.Date(ERData$Date)
date_range <- seq(from = min(ERData$Date), to = max(ERData$Date), by = "day")
# Join with the complete date sequence (like reindex in pandas)
ERData <- data.frame(Date = date_range) %>%
left_join(ERData, by = "Date")
# Linear interpolation for missing values
ERData$Value <- na.approx(ERData$Value)
# Calculate USDCHF and CHFUSD
ERData$USDCHF <- ERData$Value
ERData$CHFUSD <- 1 / ERData$USDCHF
# Calculate LogCHFUSD and LaggedLogCHFUSD
ERData$LogCHFUSD <- log(ERData$CHFUSD)
ERData$LaggedLogCHFUSD <- lag(ERData$LogCHFUSD, 1)
# Calculate LogDifferenceCHFUSD
ERData$LogDifferenceCHFUSD <- ERData$LogCHFUSD - ERData$LaggedLogCHFUSD
View(ERData)
write.csv(ERData, file = "ExchangeRateData.csv", row.names = FALSE)
reticulate::source_python('~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting/clean_data.py')
source("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting/clean_data.R")
View(Saron)
View(SARONData)
# Fetching SARON data
SARONurl <- "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
SARONData <- fetch_data(SARONurl, skip_rows = 3, delimiter = ";", date_format = "%d.%m.%Y")
View(SARONData)
# Function to fetch CSV data from a URL
fetch_data <- function(url, skip_rows, delimiter = ",", column_names = c("Date", "Value"), date_format = NULL) {
response <- GET(url)
data <- content(response, "text")
df <- read_csv(data, sep = delimiter, skip = skip_rows, header = TRUE, col_names = column_names, col_types = cols(.default = col_character()))
df$Date <- as.Date(df$Date, format = date_format)
df
}
# Fetching SARON data
SARONurl <- "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
SARONData <- fetch_data(SARONurl, skip_rows = 3, delimiter = ";", date_format = "%d.%m.%Y")
View(SARONData)
SARONData <- SARONData %>%
mutate(SARON = na.approx(as.numeric(Value)))
url <- "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
response <- GET(url)
View(response)
data <- content(response, "text")
df <- read_csv(data, sep = ";", skip = 3, header = TRUE, col_names = c("Date", "Value"), col_types = cols(.default = col_character()))
df <- read_csv(data, delim = ";", skip = 3, header = TRUE, col_names = c("Date", "Value"), col_types = cols(.default = col_character()))
? read_csv
df <- read_delim(data, delim = ";", skip = 3, header = TRUE, col_names = c("Date", "Value"), col_types = cols(.default = col_character()))
df <- read_delim(data, delim = ";", skip = 3, col_names = c("Date", "Value"), col_types = cols(.default = col_character()))
View(df)
df <- read_delim(data, delim = ";", skip = 4, col_names = c("Date", "Value"), col_types = cols(.default = col_character()))
View(df)
df$Date <- as.Date(df$Date, format = date_format)
df$Date <- as.Date(df$Date, format = "%d.%m.%Y")
View(df)
# Fetching SARON data
SARONurl <- "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
SARONData <- fetch_data(SARONurl, skip_rows = 4, delimiter = ";", date_format = "%d.%m.%Y")
SARONData <- SARONData %>%
mutate(SARON = na.approx(as.numeric(Value)))
View(SARONData)
# Function to fetch CSV data from a URL
fetch_data <- function(url, skip_rows, delimiter = ",", column_names = c("Date", "Value"), date_format = NULL) {
response <- GET(url)
data <- content(response, "text")
df <- read_delim(data, delim = delimiter, skip = skip_rows, col_names = column_names, col_types = cols(.default = col_character()))
df$Date <- as.Date(df$Date, format = date_format)
df
}
# Fetching SARON data
SARONurl <- "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
SARONData <- fetch_data(SARONurl, skip_rows = 4, delimiter = ";", date_format = "%d.%m.%Y")
View(SARONData)
SARONData <- SARONData %>%
mutate(SARON = na.approx(as.numeric(Value)))
View(SARONData)
# Fetching SOFR data
SOFRurl <- "https://fred.stlouisfed.org/graph/fredgraph.csv?bgcolor=%23e1e9f0&chart_type=line&drp=0&fo=open%20sans&graph_bgcolor=%23ffffff&height=450&mode=fred&recession_bars=on&txtcolor=%23444444&ts=12&tts=12&width=1319&nt=0&thu=0&trc=0&show_legend=yes&show_axis_titles=yes&show_tooltip=yes&id=SOFR&scale=left&cosd=2018-04-03&coed=2024-11-09&line_color=%234572a7&link_values=false&line_style=solid&mark_type=none&mw=3&lw=2&ost=-99999&oet=99999&mma=0&fml=a&fq=Daily&fam=avg&fgst=lin&fgsnd=2020-02-01&line_index=1&transformation=lin&vintage_date=2024-11-12&revision_date=2024-11-12&nd=2018-04-03"
SOFRData <- fetch_data(SOFRurl, skip_rows = 0, date_format = "%Y-%m-%d")
SOFRData <- SOFRData %>%
mutate(SOFR = na.approx(as.numeric(Value)))
View(SOFRData)
SOFRData <- fetch_data(SOFRurl, skip_rows = 1, date_format = "%Y-%m-%d")
SOFRData <- SOFRData %>%
mutate(SOFR = na.approx(as.numeric(Value)))
View(SOFRData)
url <- "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
# Function to fetch CSV data from a URL
fetch_data <- function(url, skip_rows, delimiter = ",", column_names = c("Date", "Value"), date_format = NULL) {
response <- GET(url)
data <- content(response, "text")
df <- read_delim(data, delim = delimiter, skip = skip_rows, na = c("", "ND", "."), col_names = column_names, col_types = cols(.default = col_character()))
df$Date <- as.Date(df$Date, format = date_format)
df
}
# Fetching SARON data
SARONurl <- "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
SARONData <- fetch_data(SARONurl, skip_rows = 4, delimiter = ";", date_format = "%d.%m.%Y")
SARONData <- SARONData %>%
mutate(SARON = na.approx(as.numeric(Value)))
# Fetching SOFR data
SOFRurl <- "https://fred.stlouisfed.org/graph/fredgraph.csv?bgcolor=%23e1e9f0&chart_type=line&drp=0&fo=open%20sans&graph_bgcolor=%23ffffff&height=450&mode=fred&recession_bars=on&txtcolor=%23444444&ts=12&tts=12&width=1319&nt=0&thu=0&trc=0&show_legend=yes&show_axis_titles=yes&show_tooltip=yes&id=SOFR&scale=left&cosd=2018-04-03&coed=2024-11-09&line_color=%234572a7&link_values=false&line_style=solid&mark_type=none&mw=3&lw=2&ost=-99999&oet=99999&mma=0&fml=a&fq=Daily&fam=avg&fgst=lin&fgsnd=2020-02-01&line_index=1&transformation=lin&vintage_date=2024-11-12&revision_date=2024-11-12&nd=2018-04-03"
SOFRData <- fetch_data(SOFRurl, skip_rows = 1, date_format = "%Y-%m-%d")
SOFRData <- SOFRData %>%
mutate(SOFR = na.approx(as.numeric(Value)))
# Fetching ER data
ERurl <- "https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn"
ERData <- fetch_data(ERurl, skip_rows = 5, date_format = "%Y-%m-%d")
ERData <- ERData %>%
mutate(USDCHF = na.approx(as.numeric(Value)),
CHFUSD = 1 / USDCHF,
LogCHFUSD = log(CHFUSD),
LaggedLogCHFUSD = lag(LogCHFUSD),
LogDifferenceCHFUSD = LogCHFUSD - LaggedLogCHFUSD)
View(ERData)
ERData <- fetch_data(ERurl, skip_rows = 6, date_format = "%Y-%m-%d")
ERData <- ERData %>%
mutate(USDCHF = na.approx(as.numeric(Value)),
CHFUSD = 1 / USDCHF,
LogCHFUSD = log(CHFUSD),
LaggedLogCHFUSD = lag(LogCHFUSD),
LogDifferenceCHFUSD = LogCHFUSD - LaggedLogCHFUSD)
# Combining the datasets
combinedData <- reduce(list(SARONData, SOFRData, ERData), full_join, by = "Date")
? reduce
library(purrr)
# Combining the datasets
combinedData <- reduce(list(SARONData, SOFRData, ERData), full_join, by = "Date")
# Trimming the data
trimmedData <- combinedData %>%
filter(!is.na(SARON) & !is.na(SOFR) & !is.na(LogDifferenceCHFUSD))
# Checking for missing dates
date_range <- seq(from = min(trimmedData$Date), to = max(trimmedData$Date), by = "day")
missing_dates <- setdiff(date_range, trimmedData$Date)
if (length(missing_dates) == 0) {
print("No missing dates in the series.")
} else {
print(paste("Missing dates:", missing_dates))
}
View(trimmedData)
View(SOFRData)
View(SARONData)
View(SARONdate_range)
View(ERData)
# Combining the datasets
SARONData <- SARONData %>% select(Date, SARON)
SOFRData <- SOFRData %>% select(Date, SOFR)
ERData <- ERData %>% select(Date, LogDifferenceCHFUSD)
combinedData <- reduce(list(SARONData, SOFRData, ERData), full_join, by = "Date")
View(combinedData)
# Trimming the data
trimmedData <- combinedData %>%
filter(!is.na(SARON) & !is.na(SOFR) & !is.na(LogDifferenceCHFUSD))
View(trimmedData)
# Checking for missing dates
date_range <- seq(from = min(trimmedData$Date), to = max(trimmedData$Date), by = "day")
missing_dates <- setdiff(date_range, trimmedData$Date)
if (length(missing_dates) == 0) {
print("No missing dates in the series.")
} else {
print(paste("Missing dates:", missing_dates))
}
View(combinedData)
first_valid_date <- combinedData %>%
filter(!is.na(SARON) & !is.na(SOFR) & !is.na(LogDifferenceCHFUSD)) %>%
summarize(first_date = min(Date)) %>%
pull(first_date)
last_valid_date <- combinedData %>%
filter(!is.na(SARON) & !is.na(SOFR) & !is.na(LogDifferenceCHFUSD)) %>%
summarize(last_date = max(Date)) %>%
pull(last_date)
# Trim the data to keep only rows between these dates
trimmedData <- combinedData %>%
filter(Date >= first_valid_date & Date <= last_valid_date)
View(trimmedData)
ERurl <- "https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn"
ERData <- fetch_data(ERurl, skip_rows = 6, date_format = "%Y-%m-%d")
date_range <- seq(from = min(ERData$Date), to = max(ERData$Date), by = "day")
ERData <- data.frame(Date = date_range) %>%
left_join(ERData, by = "Date")
ERData$Value <- na.approx(ERData$Value)
ERData <- ERData %>%
mutate(USDCHF = na.approx(as.numeric(Value)),
CHFUSD = 1 / USDCHF,
LogCHFUSD = log(CHFUSD),
LaggedLogCHFUSD = lag(LogCHFUSD),
LogDifferenceCHFUSD = LogCHFUSD - LaggedLogCHFUSD)
View(ERData)
source("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting/clean_data.R")
source("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting/clean_data.R")
View(trimmedData)
source("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting/clean_data2.R")
source("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting/clean_data2.R")
# Calculate the interest rate differential
trimmedData <- trimmedData %>%
mutate(InterestRateDiff = SARON - SOFR)
# Perform regression analysis
result <- lm(LogDifferenceCHFUSD ~ InterestRateDiff, data = trimmedData)
summary(result)
# You can also consider different lags, like this:
result_lag1 <- lm(ActualExchangeRateChange ~ lag(InterestRateDiff, 1), data = trimmedData)
# You can also consider different lags, like this:
result_lag1 <- lm(LogDifferenceCHFUSD ~ lag(InterestRateDiff, 1), data = trimmedData)
summary(result_lag1)
# Durbin-Watson test for autocorrelation
dw_test <- dwtest(result)
library(lmtest)
# Durbin-Watson test for autocorrelation
dw_test <- dwtest(result)
print(dw_test)
library(forecast)
# Check if the series is stationary
adf.test(trimmedData$LogDifferenceCHFUSD)
# Fit ARIMA model
# auto.arima automatically selects the best p, d, q parameters
arima_model <- auto.arima(trimmedData$LogDifferenceCHFUSD)
# Summary of the model
summary(arima_model)
# Check model diagnostics
checkresiduals(arima_model)
# If you want to make forecasts
forecasts <- forecast(arima_model, h = 10) # h is the number of periods to forecast
plot(forecasts)
# ARIMA forecasts
forecast <- forecast(arima_model, h = 10)
plot(forecast)
# Convert log differences to cumulative changes
cumulative_changes <- exp(forecast$mean)
# Get the last known actual exchange rate
last_exchange_rate <- tail(trimmedData$CHFUSD, 1)
# Apply cumulative changes to the last known exchange rate
forecasted_exchange_rates <- last_exchange_rate * cumprod(cumulative_changes)
# Print or plot the forecasted exchange rates
print(forecasted_exchange_rates)
plot(forecasted_exchange_rates)
last_log_exchange_rate <- tail(trimmedData$LogCHFUSD, 1)
forecasted_log_exchange_rates <- last_log_exchange_rate + cumsum(forecasted_log_diff$mean)
forecasted_exchange_rates <- exp(forecasted_log_exchange_rates)
last_log_exchange_rate <- tail(trimmedData$LogCHFUSD, 1)
forecasted_log_exchange_rates <- last_log_exchange_rate + cumsum(forecast$mean)
forecasted_exchange_rates <- exp(forecasted_log_exchange_rates)
plot(forecasted_exchange_rates)
View(forecast)
# Check for non-finite values in the forecasted exchange rates
if(any(!is.finite(forecasted_exchange_rates))) {
warning("Non-finite values found in forecasted exchange rates.")
}
# Check the range of forecasted exchange rates
range(forecasted_exchange_rates)
frequency(trimmedData$LogDifferenceCHFUSD) <- 7  # for weekly seasonality in daily data
View(trimmedData)
View(trimmedData)
log_diff_ts <- ts(trimmedData$LogDifferenceCHFUSD, frequency = 365)
# Fit ARIMA model
# auto.arima automatically selects the best p, d, q parameters
arima_model <- auto.arima(log_diff_ts)
# Summary of the model
summary(arima_model)
# Check model diagnostics
checkresiduals(arima_model)
# ARIMA forecasts
forecast <- forecast(arima_model, h = 10)
plot(forecast)
last_log_exchange_rate <- tail(log_diff_ts, 1)
forecasted_log_exchange_rates <- last_log_exchange_rate + cumsum(forecast$mean)
# ARIMA forecasts
forecast <- forecast(arima_model, h = 365)
plot(forecast)
