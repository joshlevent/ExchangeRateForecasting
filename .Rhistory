library(lubridate)
library(zoo)
library(purrr)
library(lmtest)
library(forecast)
library(tseries)
library(tsbox)
library(ggplot2)
library(CADFtest)
# clean objects
rm(list=ls())
# Load user-defined commands and packages
source("UserPackages.R")
# Create an output folder in the current directory
mainDir = getwd()
outDir = makeOutDir(mainDir, "ERFOutput")
# ------------------------------------------------------------------------------
# 1) Data import, cleaning and preparation
# ------------------------------------------------------------------------------
# define locale for SNB imports
de_CH = locale(date_format = "%d.%m.%Y")
# 1.1 SARON
# Get data
url = "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
response = GET(url)
data = content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SARON-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents and save to objects
df = read_delim(data, delim = "; ", skip = 4,
col_types = "Dd", col_names = c("Date", "Value"),
locale = de_CH, col_select = c(1,2))
SARON = xts(df$Value, order.by = df$Date)
# ------------------------------------------------------------------------------
# 0) Packages and functions that we need
# ------------------------------------------------------------------------------
library(httr)
library(readr)
library(dplyr)
library(lubridate)
library(zoo)
library(purrr)
library(lmtest)
library(forecast)
library(tseries)
library(tsbox)
library(ggplot2)
library(CADFtest)
# clean objects
rm(list=ls())
# Load user-defined commands and packages
source("UserPackages.R")
# Create an output folder in the current directory
mainDir = getwd()
outDir = makeOutDir(mainDir, "ERFOutput")
# define locale for SNB imports
de_CH = locale(date_format = "%d.%m.%Y")
# 1.1 SARON
# Get data
url = "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
response = GET(url)
data = content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SARON-", timestamp, ".csv")
write(data, file = filename)
? getwd()
?setwd
? setwd()
getwd()
mainDir
setwd("")
setwd("/")
getwd()
# Create an output folder in the current directory
mainDir = getwd()
setwd("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting")
# ------------------------------------------------------------------------------
# 0) Packages and functions that we need
# ------------------------------------------------------------------------------
library(httr)
library(readr)
library(dplyr)
library(lubridate)
library(zoo)
library(purrr)
library(lmtest)
library(forecast)
library(tseries)
library(tsbox)
library(ggplot2)
library(CADFtest)
# clean objects
rm(list=ls())
# Load user-defined commands and packages
source("UserPackages.R")
# Create an output folder in the current directory
mainDir = getwd()
outDir = makeOutDir(mainDir, "ERFOutput")
outDir = makeOutDir(mainDir, "/ERFOutput")
# Load user-defined commands and packages
source("UserPackages.R")
setwd("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting")
# Load user-defined commands and packages
source("UserPackages.R")
# Create an output folder in the current directory
mainDir = getwd()
outDir = makeOutDir(mainDir, "/ERFOutput")
# Load user-defined commands and packages
source("UserPackages.R")
# Create an output folder in the current directory
mainDir = getwd()
outDir = makeOutDir(mainDir, "ERFOutput")
# define locale for SNB imports
de_CH = locale(date_format = "%d.%m.%Y")
# 1.1 SARON
# Get data
url = "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
response = GET(url)
data = content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SARON-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents and save to objects
df = read_delim(data, delim = "; ", skip = 4,
col_types = "Dd", col_names = c("Date", "Value"),
locale = de_CH, col_select = c(1,2))
SARON = xts(df$Value, order.by = df$Date)
library(quantmod)
# clean objects
rm(list=ls())
? rm()
emptyenv()
globalenv()
detach("package:dplyr", unload=TRUE)
# ------------------------------------------------------------------------------
# 0) Packages and functions that we need
# ------------------------------------------------------------------------------
library(httr)
library(readr)
# Load user-defined commands and packages
source("UserPackages.R")
setwd("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting")
# Create an output folder in the current directory
mainDir = getwd()
# Create an output folder in the current directory
mainDir = getwd()
outDir = makeOutDir(mainDir, "ERFOutput")
# Load user-defined commands and packages
source("UserPackages.R")
# Create an output folder in the current directory
mainDir = getwd()
outDir = makeOutDir(mainDir, "ERFOutput")
# define locale for SNB imports
de_CH = locale(date_format = "%d.%m.%Y")
? locales
? locale()
read_delim
? read.delim
# ------------------------------------------------------------------------------
# 0) Packages and functions that we need
# ------------------------------------------------------------------------------
library(readr)
# define locale for SNB imports
de_CH = locale(date_format = "%d.%m.%Y")
# 1.1 SARON
# Get data
url = "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
response = GET(url)
library(httr)
response = GET(url)
data = content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SARON-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents and save to objects
df = read_delim(data, delim = "; ", skip = 4,
col_types = "Dd", col_names = c("Date", "Value"),
locale = de_CH, col_select = c(1,2))
SARON = xts(df$Value, order.by = df$Date)
library(xts)
SARON = xts(df$Value, order.by = df$Date)
SARONData = select(df, Date, Value)
? select()
?? select()
library(dyplr)
library(dplyr)
SARONData = select(df, Date, Value)
# 1.2 SOFR
# Get data
url = "https://fred.stlouisfed.org/graph/fredgraph.csv?bgcolor=%23e1e9f0&chart_type=line&drp=0&fo=open%20sans&graph_bgcolor=%23ffffff&height=450&mode=fred&recession_bars=on&txtcolor=%23444444&ts=12&tts=12&width=1319&nt=0&thu=0&trc=0&show_legend=yes&show_axis_titles=yes&show_tooltip=yes&id=SOFR&scale=left&cosd=2018-04-03&coed=2024-11-09&line_color=%234572a7&link_values=false&line_style=solid&mark_type=none&mw=3&lw=2&ost=-99999&oet=99999&mma=0&fml=a&fq=Daily&fam=avg&fgst=lin&fgsnd=2020-02-01&line_index=1&transformation=lin&vintage_date=2024-11-12&revision_date=2024-11-12&nd=2018-04-03"
response = GET(url)
data = content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SOFR-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents and save to objects
df = read_csv(data, skip = 1, col_types = "Dd", col_names = c("Date", "Value"),
col_select = c(1,2))
problems(df)
SOFR = xts(df$Value, order.by = df$Date)
SOFRData = select(df, Date, Value)
# 1.3 Exchange Rate USD CHF
# Get data
url = "https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn"
response = GET(url)
data = content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/ER-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents and save to objects
df = read_csv(data, skip = 6, col_types = "Dd", col_names = c("Date", "Value"),
col_select = c(1,2))
# parse the file contents and save to objects
df = read_csv(data, skip = 6, col_types = "Dd", col_names = c("Date", "Value"))
View(df)
# parse the file contents and save to objects
df = read_csv(data, skip = 6, col_types = "cd", col_names = c("Date", "Value"))
# parse the file contents and save to objects
df = read_csv(data, skip = 6, col_types = "Dd", col_names = c("Date", "Value"))
ER = xts(df$Value, order.by = df$Date)
ERData = select(df, Date, Value)
# Additional processing for ERData
ERData <- ERData %>%
mutate(USDCHF = 1 / Value,
LogCHFUSD = log(USDCHF),
ForwardLogCHFUSD = lead(LogCHFUSD),
LogDifferenceCHFUSD = (LogCHFUSD - ForwardLogCHFUSD) * 100)
# 1.4 Swiss Policy Actions
# Get new data
url <- "https://data.snb.ch/json/table/getFile?fileId=2eb5650771935a870db45db19f098567acfe49cf8e9872727243fc1885238707&pageViewTime=20231127_172937&lang=en"
response <- GET(url)
data <- content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SwissPolicy1-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents
df <- read_delim(data, delim = ";", col_types = "Dcd", skip = 4,
na = c("", "ND", "."), col_names = c("Date", "D0", "Value"))
data = content(response, "text")
# 1.3 Exchange Rate USD CHF
# Get data
url = "https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn"
response = GET(url)
data = content(response, "text")
# parse the file contents and save to objects
df = read_csv(data, skip = 6, col_types = "Dd", col_names = c("Date", "Value"),
na = c("", "ND", "."))
# 1.2 SOFR
# Get data
url = "https://fred.stlouisfed.org/graph/fredgraph.csv?bgcolor=%23e1e9f0&chart_type=line&drp=0&fo=open%20sans&graph_bgcolor=%23ffffff&height=450&mode=fred&recession_bars=on&txtcolor=%23444444&ts=12&tts=12&width=1319&nt=0&thu=0&trc=0&show_legend=yes&show_axis_titles=yes&show_tooltip=yes&id=SOFR&scale=left&cosd=2018-04-03&coed=2024-11-09&line_color=%234572a7&link_values=false&line_style=solid&mark_type=none&mw=3&lw=2&ost=-99999&oet=99999&mma=0&fml=a&fq=Daily&fam=avg&fgst=lin&fgsnd=2020-02-01&line_index=1&transformation=lin&vintage_date=2024-11-12&revision_date=2024-11-12&nd=2018-04-03"
response = GET(url)
data = content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SOFR-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents and save to objects
df = read_csv(data, skip = 1, col_types = "Dd", col_names = c("Date", "Value"),
na = c("", "ND", "."))
SOFR = xts(df$Value, order.by = df$Date)
SOFRData = select(df, Date, Value)
# 1.3 Exchange Rate USD CHF
# Get data
url = "https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn"
response = GET(url)
data = content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/ER-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents and save to objects
df = read_csv(data, skip = 6, col_types = "Dd", col_names = c("Date", "Value"),
na = c("", "ND", "."))
ER = xts(df$Value, order.by = df$Date)
ERData = select(df, Date, Value)
# Additional processing for ERData
ERData <- ERData %>%
mutate(USDCHF = 1 / Value,
LogCHFUSD = log(USDCHF),
ForwardLogCHFUSD = lead(LogCHFUSD),
LogDifferenceCHFUSD = (LogCHFUSD - ForwardLogCHFUSD) * 100)
# 1.4 Swiss Policy Actions
# Get new data
url <- "https://data.snb.ch/json/table/getFile?fileId=2eb5650771935a870db45db19f098567acfe49cf8e9872727243fc1885238707&pageViewTime=20231127_172937&lang=en"
response <- GET(url)
data <- content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SwissPolicy1-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents
df <- read_delim(data, delim = ";", col_types = "Dcd", skip = 4,
na = c("", "ND", "."), col_names = c("Date", "D0", "Value"))
# additional transformations to select only policy rate
df <- filter(df, D0 == "LZ")
df <- select(df, Date, Value)
df <- na.trim(df)
# save to xts object
SwissPolicyRate = xts(df$Value, order.by = df$Date)
# transformations to select policy changes
SwissPolicyChange1 = ts_diff(SwissPolicyRate)
SwissPolicyChange1 = subset(SwissPolicyChange1, value != 0)
?? ts_diff
# NOTE WELL: DPLYR and XTS require two different implementations of the lag()
# function. Call these explicitly like this: dplyr::lag(df), stats::lag(xts)
library(tsbox)
# transformations to select policy changes
SwissPolicyChange1 = ts_diff(SwissPolicyRate)
SwissPolicyChange1 = subset(SwissPolicyChange1, value != 0)
# Get old data
url <- "https://data.snb.ch/json/table/getFile?fileId=598a401ddfd66075bc2be3845d5f21e3ddf5e22d083ea30424af2e633e374778&pageViewTime=20231127_173150&lang=en"
response <- GET(url)
data <- content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SwissPolicy2-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents
df <- read_delim(data, delim = ";", col_types = "Dcd", skip = 4,
na = c("", "ND", "."), col_names = c("Date", "D0", "Value"))
# additional transformations to select only policy rate
df <- df %>% filter(D0 == "UG")
df <- select(df, Date, Value)
df <- na.trim(df)
# save to xts object
SwissPolicyRate = xts(df$Value, order.by = df$Date)
# transformations to select policy changes
SwissPolicyChange2 = ts_diff(SwissPolicyRate)
SwissPolicyChange2 = subset(SwissPolicyChange2, value != 0)
# combine old and new data
SwissPolicyChange = rbind(SwissPolicyChange1, SwissPolicyChange2)
# 1.5 USA Policy Actions
# Get data
url = "https://fred.stlouisfed.org/graph/fredgraph.csv?bgcolor=%23e1e9f0&chart_type=line&drp=0&fo=open%20sans&graph_bgcolor=%23ffffff&height=450&mode=fred&recession_bars=on&txtcolor=%23444444&ts=12&tts=12&width=1318&nt=0&thu=0&trc=0&show_legend=yes&show_axis_titles=yes&show_tooltip=yes&id=DFEDTARU&scale=left&cosd=2018-01-01&coed=2023-11-27&line_color=%234572a7&link_values=false&line_style=solid&mark_type=none&mw=3&lw=2&ost=-99999&oet=99999&mma=0&fml=a&fq=Daily%2C%207-Day&fam=avg&fgst=lin&fgsnd=2020-02-01&line_index=1&transformation=lin&vintage_date=2023-11-27&revision_date=2023-11-27&nd=2008-12-16"
response = GET(url)
data = content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/USPolicy-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents and save to objects
df = read_csv(data, skip = 1, col_types = "Dd", col_names = c("Date", "Value"))
USPolicyRate = xts(df$Value, order.by = df$Date)
# transformations to select policy changes
USPolicyChange = ts_diff(USPolicyRate)
USPolicyChange = subset(USPolicyChange, value != 0)
# 1.6 Combining and trimming exchange rate and interest rate timeseries
# Select and rename relevant columns
SARONData <- SARONData %>% select(Date, SARON = Value)
SOFRData <- SOFRData %>% select(Date, SOFR = Value)
ERData <- ERData %>% select(Date, LogDifferenceCHFUSD)
# Combine dataframes
combinedData <- reduce(list(SARONData, SOFRData, ERData), full_join, by = "Date")
?? reduce()
library(purrr)
# Combine dataframes
combinedData <- reduce(list(SARONData, SOFRData, ERData), full_join, by = "Date")
# Identify valid date range
first_valid_date <- combinedData %>% filter(!is.na(SARON) & !is.na(SOFR) & !is.na(LogDifferenceCHFUSD)) %>% summarize(first_date = min(Date)) %>% pull(first_date)
last_valid_date <- combinedData %>% filter(!is.na(SARON) & !is.na(SOFR) & !is.na(LogDifferenceCHFUSD)) %>% summarize(last_date = max(Date)) %>% pull(last_date)
# Trim data to valid range
trimmedData <- combinedData %>% filter(Date >= first_valid_date & Date <= last_valid_date)
# checking whether the log difference approximation is suitable
max(trimmedData$LogDifferenceCHFUSD, na.rm = TRUE)
min(trimmedData$LogDifferenceCHFUSD, na.rm = TRUE)
# Calculate the interest rate differential
trimmedData <- trimmedData %>%
mutate(InterestRateDiff = SARON - SOFR)
# split data into timeseries objects
IRdifferential = xts(trimmedData$InterestRateDiff, order.by = trimmedData$Date)
ERd = xts(trimmedData$LogDifferenceCHFUSD, order.by = trimmedData$Date)
# check for stationarity with u Root test
uRootER = CADFtest(ERd, max.lag.y = 10, type = "drift", criterion = "BIC")
library(CADFtest)
# check for stationarity with u Root test
uRootER = CADFtest(ERd, max.lag.y = 10, type = "drift", criterion = "BIC")
summary(uRootER)
# this is stationary, good!
uRootIRd = CADFtest(IRdifferential, max.lag.y = 10, type = "drift", criterion = "BIC")
summary(uRootIRd)
# this is not stationary, bad!
# create a first difference variable
IRdifferential_d = IRdifferential - lag(IRdifferential)
# check the first difference for
uRootFDIR = CADFtest(IRdifferential_d, max.lag.y = 10, type = "drift", criterion = "BIC")
summary(uRootFDIR)
# plot first difference of interest rate differential
ts_plot(IRdifferential_d)
p <- autoplot(IRdifferential_d)
library(ggplot2)
p <- autoplot(IRdifferential_d)
p <- ggLayout(p) +
labs(title = "First differences of Interest Rate differential between Switzerland and USA") +
scale_y_continuous(breaks = seq(-3, 3, by = 0.5)) +
theme(panel.grid.minor.x = element_line(colour = "black",linewidth=0.1,linetype="dotted"))
p
ggsave(paste(outDir, "First_diff_interest_rate_differential.png", sep = "/"), plot = last_plot(), width = 21, height = 14.8, units = c("cm"))
# plot first difference of log exchange rates
ts_plot(ERd)
p <- autoplot(ERd)
p <- ggLayout(p) +
labs(title = "First differences of log exchange rate between Switzerland and USA") +
scale_y_continuous(breaks = seq(-3, 3, by = 0.5)) +
theme(panel.grid.minor.x = element_line(colour = "black",linewidth=0.1,linetype="dotted"))
p
ggsave(paste(outDir, "First_diff_log_exchange_rate.png", sep = "/"), plot = last_plot(), width = 21, height = 14.8, units = c("cm"))
# plot both the interest rates
ts_plot(InterestRatesLong)
View(trimmedData)
# plot both the interest rates
InterestRatesLong <- pivot_longer(trimmedData, cols = c(SARON, SOFR), names_to = "id", values_to = "value")
library(tidyr)
# plot both the interest rates
InterestRatesLong <- pivot_longer(trimmedData, cols = c(SARON, SOFR), names_to = "id", values_to = "value")
View(InterestRatesLong)
ts_plot(InterestRatesLong)
InterestRatesLong = select(InterestRatesLong, Date, id, value)
ts_plot(InterestRatesLong)
p <- ggplot(InterestRatesLong, aes(x = Date, y = value, color = id)) +
geom_line()
p <- ggLayout(p) +
labs(title = "Swiss and US Interest Rates (Secured Overnight) Over Time") +
scale_color_manual(values = c("SARON" = "firebrick4", "SOFR" = "blue4"),
labels = c("SARON" = "Switzerland", "SOFR" = "United States")) +
scale_y_continuous(breaks = seq(-1, 5.5, by = 0.5)) +
theme(panel.grid.minor.x = element_line(colour = "black",linewidth=0.1,linetype="dotted"))
p
ggsave(paste(outDir, "InterestRates.pdf", sep = "/"), plot = last_plot(), width = 21, height = 14.8, units = c("cm"))
p <- plotACF(ERd, 365)
p <- ggLayout(p) +
labs(title = "Autocorrelation Function of first differences of log exchange rate")
p
ggsave(paste(outDir, "ACFExchangeRateDiff.png", sep = "/"), plot = last_plot(), width = 21, height = 14.8, units = c("cm"))
plotACF(IRdifferential_d, 365)
p <- plotCCF(ERd, IRdifferential_d, lag.max = 15)
p
p <- plotCCF(ERd, IRdifferential_d, lag.max = 365)
p
ggsave(paste(outDir, "CCF.pdf", sep = "/"), plot = last_plot(), width = 21, height = 14.8, units = c("cm"))
p <- plotCCF(ERd, IRdifferential_d, lag.max = 365)
p <- ggLayout(p) +
labs(title = "Swiss and US Interest Rates (Secured Overnight) Over Time")
p
p <- ggLayout(p) +
labs(title = "Cross Correlation Function of Interest Rate differential and Exchange Rate")
p
ggsave(paste(outDir, "CCF.pdf", sep = "/"), plot = last_plot(), width = 21, height = 14.8, units = c("cm"))
? lm()
# Perform simple regression analysis
result <- lm(ERd ~ IRdifferential_d)
summary(result)
? lead()
View(ERd)
View(ERData)
# Durbin-Watson test for autocorrelation
dw_test <- dwtest(result)
# Need to check AR of residuals
# the effect of the period of
checkresiduals(ts_ts(Error1))+theme_minimal()
?? checkresiduals()
library(forecast)
# Need to check AR of residuals
# the effect of the period of
checkresiduals(ts_ts(Error1))+theme_minimal()
# Make a forecast
fcstER = forecast(result, h = 90, level = c(50, 70, 80, 95), bootstrap = FALSE)
# Make a forecast
fcstER = predict(result)
View(GetFcst)
#forecast(result, h = 90, level = c(50, 70, 80, 95), bootstrap = FALSE)
autoplot(fcstER)+theme_minimal()+theme(text=element_text(size=8))
# Make a forecast
fcstER = xts(predict(result))
View(result)
# Need to check AR of residuals
# the effect of the period of
checkresiduals(result$residuals)+theme_minimal()
# Need to check AR of residuals
# the effect of the period of
checkresiduals(ts_ts(result$residuals)+theme_minimal()
# Need to check AR of residuals
# the effect of the period of
checkresiduals(ts_ts(result$residuals))+theme_minimal()
? checkresiduals()
# Need to check AR of residuals
# the effect of the period of
checkresiduals(result)+theme_minimal()
ggsave(paste(outDir, "Residuals.pdf", sep = "/"), plot = last_plot(), width = 21, height = 14.8, units = c("cm"))
# Need to check AC of residuals
# the effect of the period of
p = checkresiduals(result)+theme_minimal()
p
ggsave(paste(outDir, "Residuals.pdf", sep = "/"), plot = last_plot(), width = 21, height = 14.8, units = c("cm"))
# Need to check AC of residuals
# the effect of the period of
pdf("residuals.pdf", width = 11.7, height = 8.3)
checkresiduals(result)+theme_minimal()
dev.off()
source("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting/ExchangeRateForecasting.R")
setwd("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting")
source("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting/ExchangeRateForecasting.R")
source("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting/ExchangeRateForecasting.R")
setwd("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting")
source("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting/ExchangeRateForecasting.R")
