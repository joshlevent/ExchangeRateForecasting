mutate(Value = na.approx(as.numeric(Value)))
# Function to fetch and preprocess data
fetch_data <- function(url, skip_rows, delimiter, date_format, col_types = "Dd", col_names = c("Date", "Value")) {
response <- GET(url)
data <- content(response, "text")
df <- read_delim(data, delim = delimiter, col_types = col_types, skip = skip_rows, na = c("", "ND", "."), col_names = col_names)
# the following part fills in missing dates and interpolates the data
if (nrow(df) > 0) {
df$Date <- as.Date(df$Date, format = date_format)
date_range <- seq(from = min(df$Date), to = max(df$Date), by = "day")
df <- data.frame(Date = date_range) %>%
left_join(df, by = "Date") %>%
mutate(Value = na.approx(as.numeric(Value)))
}
return(df)
}
SNBPolicydata1 <- fetch_data(SNBPolicyurl1, 4, ";", "%d.%m.%Y", col_types = "Dcd", col_names = c("Date", "D0", "Value"))
date_range <- seq(from = min(df$Date), to = max(df$Date), by = "day")
df <- data.frame(Date = date_range) %>%
left_join(df, by = "Date") %>%
mutate(Value = na.approx(as.numeric(Value)))
? filter
filter(df, D0 == "SARON")
View(df)
df %>% filter(D0 == "SARON")
View(df)
df <- df %>% filter(D0 == "SARON")
df <- read_delim(data, delim = ";", col_types = "Dcd", skip = 4, na = c("", "ND", "."), col_names = c("Date", "D0", "Value"))
PolicyRate <- df %>% filter(D0 == "LZ")
View(PolicyRate)
date_range <- seq(from = min(PolicyRate$Date), to = max(PolicyRate$Date), by = "day")
PolicyRate <- data.frame(Date = date_range) %>%
left_join(PolicyRate, by = "Date") %>%
mutate(Value = na.approx(as.numeric(Value)))
date_range <- seq(from = min(PolicyRate$Date), to = max(PolicyRate$Date), by = "day")
PolicyRate <- data.frame(Date = date_range) %>%
left_join(PolicyRate, by = "Date") %>%
mutate(Value = na.approx(as.numeric(Value)))
df_dates <- data.frame(Date = date_range)
View(df_dates)
? left_join
new_df <- (df_dates, PolicyRate, by = "Date")
new_df <- left_join(df_dates, PolicyRate, by = "Date")
View(new_df)
? select
PolicyRate <- select(PolicyRate, Date, Value)
date_range <- seq(from = min(PolicyRate$Date), to = max(PolicyRate$Date), by = "day")
df_dates <- data.frame(Date = date_range)
new_df <- left_join(df_dates, PolicyRate, by = "Date")
filled_df <- mutate(new_df, Value = na.approx(Value))
? na
? na.approx
? na.trim
df_trimmed <- na.trim(new_df)
View(df_trimmed)
filled_df <- mutate(df_trimmed, Value = na.approx(Value))
View(filled_df)
PolicyRate <- df %>% filter(D0 == "LZ")
PolicyRate <- select(PolicyRate, Date, Value)
date_range <- seq(from = min(PolicyRate$Date), to = max(PolicyRate$Date), by = "day")
df_dates <- data.frame(Date = date_range)
PolicyRate <- left_join(df_dates, PolicyRate, by = "Date")
PolicyRate <- na.trim(PolicyRate)
PolicyRate <- mutate(PolicyRate, Value = na.approx(Value))
View(PolicyRate)
View(FEDPolicy)
# Get SARON data
url <- "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
response <- GET(url)
data <- content(response, "text")
cat(data)
df <- read_delim(data, delim = ";", col_types = "Dd", skip = 4, na = c("", "ND", "."), col_names = c("Date", "Value"))
problems(df)
View(df)
df <- read_delim(data, delim = ";", col_types = "Dd", skip = 3, na = c("", "ND", "."), col_names = c("Date", "Value"))
df <- read_delim(data, delim = ";", col_types = "Dd", skip = 3, na = c("", "ND", "."))
df <- read_delim(data, delim = ";", col_types = "Dd", skip = 3, na = c("", "ND", "."))
problems(df)
df <- read_delim(data, delim = ";", skip = 3, na = c("", "ND", "."))
read_delim
df <- read_delim(data, delim = ";", skip = 2, na = c("", "ND", "."))
# testing
response <- GET(SNBPolicyurl1)
data <- content(response, "text")
test <- cat(data)
df <- read_delim(data, delim = ";", col_types = "Dcd", skip = 4, na = c("", "ND", "."), col_names = c("Date", "D0", "Value"))
problems(df)
# Get SARON data
url <- "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
response <- GET(url)
data <- content(response, "text")
df <- read_delim(data, delim = ";", skip = 4, na = c("", "ND", "."))
df <- read_delim(data, delim = ";", skip = 4)
spec(data)
spec(df)
df <- read_delim(data, delim = ";", skip = 4, col_names = c("Date", "Value"))
spec(df)
df <- read_delim(data, delim = ";", skip = 4, col_types = "cd", col_names = c("Date", "Value"))
? read_delim
data <- content(response, "parsed")
View(data)
data <- content(response, "raw")
? content()
response <- GET(url)
cat(response)
? GET()
data <- content(response, "auto")
data <- content(response, "parsed")
df <- read_delim(data, delim = ";", skip = 4, col_types = "cd", col_names = c("Date", "Value"))
data <- content(response, "text")
df <- read_delim(data, delim = ";", skip = 4, col_types = "cd", col_names = c("Date", "Value"))
data <- content(response)
data <- content(response, "text")
? read_delim()
df <- read_delim(data, delim = ";", skip = 4, na = c("", "ND", "."), col_types = "cd", col_names = c("Date", "Value"))
problems(df)
df <- read_delim(data, delim = "; ", skip = 4, na = c("", "ND", "."), col_types = "cd", col_names = c("Date", "Value"))
? read_delim()
# define locale for SNB imports
de-CH = locale(date_format = "%d.%m.%Y")
# define locale for SNB imports
de_CH = locale(date_format = "%d.%m.%Y")
df <- read_delim(data, delim = "; ", skip = 4, na = c("", "ND", "."),
col_types = "cd", col_names = c("Date", "Value"),
locale = de_CH)
df <- read_delim(data, delim = "; ", skip = 4, na = c("", "ND", "."),
col_types = "Dd", col_names = c("Date", "Value"),
locale = de_CH)
SARON = xts(df$Value, order.by = df$Date)
View(SARON)
SARONData = select(df, Date, Value)
View(SARONData)
# ------------------------------------------------------------------------------
# Packages that we need
library(httr)
library(readr)
library(dplyr)
library(lubridate)
library(zoo)
library(purrr)
library(lmtest)
library(forecast)
library(tseries)
library(tsbox)
library(ggplot2)
library(CADFtest)
# clean objects
rm(list=ls())
# Load user-defined commands and packages
source("UserPackages.R")
# Create an output folder in the current directory
mainDir = getwd()
outDir = makeOutDir(mainDir, "/ERFOutput")
outDir = makeOutDir(mainDir, "ERFOutput")
# define locale for SNB imports
de_CH = locale(date_format = "%d.%m.%Y")
# Get SARON data
url = "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
response = GET(url)
data = content(response, "text")
View(response)
df = read_delim(data, delim = "; ", skip = 4, na = c("", "ND", "."),
col_types = "Dd", col_names = c("Date", "Value"),
locale = de_CH)
View(df)
df = read_delim(data, delim = "; ", skip = 4, na = c("", "ND", "."),
col_types = "Dd", col_names = c("Date", "Value"),
locale = de_CH, col_select = c(1,2))
SARON = xts(df$Value, order.by = df$Date)
SARONData = select(df, Date, Value)
? write
save(data, file = "SARON.csv")
save(data, file = "SARON.csv", ascii = TRUE)
write(data, file = "SARON.csv")
? timestamp
now()
as.Text(now(), format = "%d.%m.%Y")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("SARON-", timestamp, ".csv")
write(data, file = filename)
filename = paste0("cache/SARON-", timestamp, ".csv")
write(data, file = filename)
? makeOutDir
? makeOutDir()
??makeOutDir
filename = paste0("../cache/SARON-", timestamp, ".csv")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SARON-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents
df = read_delim(data, delim = "; ", skip = 4,
col_types = "Dd", col_names = c("Date", "Value"),
locale = de_CH, col_select = c(1,2))
SARON = xts(df$Value, order.by = df$Date)
SARONData = select(df, Date, Value)
View(SARONData)
# 1.1 SOFR
# Get data
url = "https://fred.stlouisfed.org/graph/fredgraph.csv?bgcolor=%23e1e9f0&chart_type=line&drp=0&fo=open%20sans&graph_bgcolor=%23ffffff&height=450&mode=fred&recession_bars=on&txtcolor=%23444444&ts=12&tts=12&width=1319&nt=0&thu=0&trc=0&show_legend=yes&show_axis_titles=yes&show_tooltip=yes&id=SOFR&scale=left&cosd=2018-04-03&coed=2024-11-09&line_color=%234572a7&link_values=false&line_style=solid&mark_type=none&mw=3&lw=2&ost=-99999&oet=99999&mma=0&fml=a&fq=Daily&fam=avg&fgst=lin&fgsnd=2020-02-01&line_index=1&transformation=lin&vintage_date=2024-11-12&revision_date=2024-11-12&nd=2018-04-03"
response = GET(url)
data = content(response, "text")
View(response)
response = GET(url)
# 1.1 SOFR
# Get data
url = "https://fred.stlouisfed.org/graph/fredgraph.csv?bgcolor=%23e1e9f0&chart_type=line&drp=0&fo=open%20sans&graph_bgcolor=%23ffffff&height=450&mode=fred&recession_bars=on&txtcolor=%23444444&ts=12&tts=12&width=1319&nt=0&thu=0&trc=0&show_legend=yes&show_axis_titles=yes&show_tooltip=yes&id=SOFR&scale=left&cosd=2018-04-03&coed=2024-11-09&line_color=%234572a7&link_values=false&line_style=solid&mark_type=none&mw=3&lw=2&ost=-99999&oet=99999&mma=0&fml=a&fq=Daily&fam=avg&fgst=lin&fgsnd=2020-02-01&line_index=1&transformation=lin&vintage_date=2024-11-12&revision_date=2024-11-12&nd=2018-04-03"
response = GET(url)
data = content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SOFR-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents and save to objects
df = read_csv(data, skip = 1, col_types = "Dd", col_names = c("Date", "Value"),
col_select = c(1,2))
problems(df)
# parse the file contents and save to objects
df = read_csv(data, skip = 1, col_types = "Dd", col_names = c("Date", "Value"),
col_select = c(1,2))
problems()
problems(df)
problems(data
)
? problems
SOFR = xts(df$Value, order.by = df$Date)
SOFRData = select(df, Date, Value)
View(SOFR)
View(SOFRData)
# 1.1 Exchange Rate USD CHF
# Get data
url = "https://www.federalreserve.gov/datadownload/Output.aspx?rel=H10&series=f838388dca2fd4e8bdfb846f3d2c35df&lastobs=&from=01/01/1971&to=10/09/2024&filetype=csv&label=include&layout=seriescolumn"
response = GET(url)
data = content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/ER-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents and save to objects
df = read_csv(data, skip = 6, col_types = "Dd", col_names = c("Date", "Value"),
col_select = c(1,2))
problems(df)
dat <- vroom(df)
ER = xts(df$Value, order.by = df$Date)
ERData = select(df, Date, Value)
View(ERData)
View(ER)
# 1.4 Swiss Policy Actions
# Get new data
url <- "https://data.snb.ch/json/table/getFile?fileId=2eb5650771935a870db45db19f098567acfe49cf8e9872727243fc1885238707&pageViewTime=20231127_172937&lang=en"
response <- GET(url)
data <- content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SwissPolicy1-", timestamp, ".csv")
write(data, file = filename)
df <- read_delim(data, delim = ";", col_types = "Dcd", skip = 4,
na = c("", "ND", "."), col_names = c("Date", "D0", "Value"),
col_select = c(1,3))
View(df)
df <- read_delim(data, delim = ";", col_types = "Dcd", skip = 4,
na = c("", "ND", "."), col_names = c("Date", "D0", "Value"))
View(df)
# additional transformations to select only policy rate
PolicyRate <- df %>% filter(D0 == "LZ")
PolicyRate <- select(PolicyRate, Date, Value)
View(PolicyRate)
PolicyRate <- na.trim(PolicyRate)
# parse the file contents
df <- read_delim(data, delim = ";", col_types = "Dcd", skip = 4,
na = c("", "ND", "."), col_names = c("Date", "D0", "Value"))
# additional transformations to select only policy rate
df <- df %>% filter(D0 == "LZ")
df <- select(df, Date, Value)
df <- na.trim(df)
View(df)
SwissPolicyRate = xts(df$Value, order.by = df$Date)
View(SwissPolicyRate)
SwissPolicyRateData = df
View(SwissPolicyRateData)
# Get old data
url <- "https://data.snb.ch/json/table/getFile?fileId=598a401ddfd66075bc2be3845d5f21e3ddf5e22d083ea30424af2e633e374778&pageViewTime=20231127_173150&lang=en"
response <- GET(url)
data <- content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SwissPolicy2-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents
df <- read_delim(data, delim = ";", col_types = "Dcd", skip = 3,
na = c("", "ND", "."), col_names = c("Date", "D0", "Value"))
View(df)
# parse the file contents
df <- read_delim(data, delim = ";", col_types = "Dcd", skip = 4,
na = c("", "ND", "."), col_names = c("Date", "D0", "Value"))
# additional transformations to select only policy rate
df <- df %>% filter(D0 == "UG")
df <- select(df, Date, Value)
df <- na.trim(df)
? rbind
? rbind
SwissPolicyChange = ts_diff(SwissPolicyRate)
View(SwissPolicyChange)
# parse the file contents
df <- read_delim(data, delim = ";", col_types = "Dcd", skip = 4,
na = c("", "ND", "."), col_names = c("Date", "D0", "Value"))
# additional transformations to select only policy rate
df <- filter(df, D0 == "LZ")
# parse the file contents
df <- read_delim(data, delim = ";", col_types = "Dcd", skip = 4,
na = c("", "ND", "."), col_names = c("Date", "D0", "Value"))
# 1.4 Swiss Policy Actions
# Get new data
url <- "https://data.snb.ch/json/table/getFile?fileId=2eb5650771935a870db45db19f098567acfe49cf8e9872727243fc1885238707&pageViewTime=20231127_172937&lang=en"
response <- GET(url)
data <- content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SwissPolicy1-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents
df <- read_delim(data, delim = ";", col_types = "Dcd", skip = 4,
na = c("", "ND", "."), col_names = c("Date", "D0", "Value"))
# additional transformations to select only policy rate
df <- filter(df, D0 == "LZ")
df <- select(df, Date, Value)
df <- na.trim(df)
# save to objects
SwissPolicyRate = xts(df$Value, order.by = df$Date)
SwissPolicyRateData = df
# transformations to select policy changes
SwissPolicyChange1 = ts_diff(SwissPolicyRate)
SwissPolicyChange1 <- filter(df, Date != NA)
? filter
? drop_na
SwissPolicyChange1 <- filter(df, !is.na(Date))
SwissPolicyChange1 <- filter(df, !is.na(Value))
SwissPolicyChange1 <- filter(df, !is.na(value))
SwissPolicyChange1 <- filter(df, !is.na(df))
? ts_diff
View(SwissPolicyChange1)
# transformations to select policy changes
SwissPolicyChange1 = ts_diff(SwissPolicyRate)
SwissPolicyChange1 <- filter(SwissPolicyChange1, !is.na(value))
SwissPolicyChange1 <- subset(SwissPolicyChange1, !is.na(value))
?subset
SwissPolicyChange1 = subset(SwissPolicyChange1, value != 0)
# transformations to select policy changes
SwissPolicyChange1 = ts_diff(SwissPolicyRate)
SwissPolicyChange1 = subset(SwissPolicyChange1, value != 0)
# save to objects
SwissPolicyRate = xts(df$Value, order.by = df$Date)
SwissPolicyRateData = df
# transformations to select policy changes
SwissPolicyChange1 = ts_diff(SwissPolicyRate)
SwissPolicyChange1 = subset(SwissPolicyChange1, value != 0)
# Get old data
url <- "https://data.snb.ch/json/table/getFile?fileId=598a401ddfd66075bc2be3845d5f21e3ddf5e22d083ea30424af2e633e374778&pageViewTime=20231127_173150&lang=en"
response <- GET(url)
data <- content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SwissPolicy2-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents
df <- read_delim(data, delim = ";", col_types = "Dcd", skip = 4,
na = c("", "ND", "."), col_names = c("Date", "D0", "Value"))
# additional transformations to select only policy rate
df <- df %>% filter(D0 == "UG")
df <- select(df, Date, Value)
df <- na.trim(df)
# save to xts object
SwissPolicyRate = xts(df$Value, order.by = df$Date)
# transformations to select policy changes
SwissPolicyChange2 = ts_diff(SwissPolicyRate)
SwissPolicyChange2 = subset(SwissPolicyChange2, value != 0)
View(SwissPolicyChange2)
View(SwissPolicyChange1)
# combine old and new data
SwissPolicyChange = rbind(SwissPolicyChange1, SwissPolicyChange2)
# 1.5 USA Policy Actions
# Get data
url = "https://fred.stlouisfed.org/graph/fredgraph.csv?bgcolor=%23e1e9f0&chart_type=line&drp=0&fo=open%20sans&graph_bgcolor=%23ffffff&height=450&mode=fred&recession_bars=on&txtcolor=%23444444&ts=12&tts=12&width=1318&nt=0&thu=0&trc=0&show_legend=yes&show_axis_titles=yes&show_tooltip=yes&id=DFEDTARU&scale=left&cosd=2018-01-01&coed=2023-11-27&line_color=%234572a7&link_values=false&line_style=solid&mark_type=none&mw=3&lw=2&ost=-99999&oet=99999&mma=0&fml=a&fq=Daily%2C%207-Day&fam=avg&fgst=lin&fgsnd=2020-02-01&line_index=1&transformation=lin&vintage_date=2023-11-27&revision_date=2023-11-27&nd=2008-12-16"
response = GET(url)
data = content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/USPolicy-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents and save to objects
df = read_csv(data, skip = 1, col_types = "Dd", col_names = c("Date", "Value"))
View(df)
# transformations to select policy changes
USPolicyChange = ts_diff(USPolicyRate)
View(df)
USPolicyRate = xts(df$Value, order.by = df$Date)
# transformations to select policy changes
USPolicyChange = ts_diff(USPolicyRate)
USPolicyChange = subset(USPolicyChange, value != 0)
View(USPolicyChange)
autoplot(USPolicyChange)
?autoplot
autoplot(USPolicyRate)
autoplot(SwissPolicyRate)
# Additional processing for ERData
ERData <- ERData %>%
mutate(USDCHF = 1 / Value,
LogCHFUSD = log(USDCHF),
ForwardLogCHFUSD = lead(LogCHFUSD),
LogDifferenceCHFUSD = (LogCHFUSD - ForwardLogCHFUSD) * 100)
View(ERData)
View(SARONData)
View(SOFRData)
View(ERData)
# Select and rename relevant columns
SARONData <- SARONData %>% select(Date, SARON = Value)
SOFRData <- SOFRData %>% select(Date, SOFR = Value)
ERData <- ERData %>% select(Date, LogDifferenceCHFUSD)
# Combine datasets
combinedData <- reduce(list(SARONData, SOFRData, ERData), full_join, by = "Date")
View(combinedData)
# ------------------------------------------------------------------------------
#   Exchange Rate Forecasting
# ------------------------------------------------------------------------------
#   Applied Macroeconometrics, University of Neuchatel
#   Josh Levent, Julien Beaud, 2023
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# 0) Packages and functions that we need
# ------------------------------------------------------------------------------
library(httr)
library(readr)
library(dplyr)
library(lubridate)
library(zoo)
library(purrr)
library(lmtest)
library(forecast)
library(tseries)
library(tsbox)
library(ggplot2)
library(CADFtest)
# clean objects
rm(list=ls())
# Load user-defined commands and packages
source("UserPackages.R")
# Create an output folder in the current directory
mainDir = getwd()
outDir = makeOutDir(mainDir, "ERFOutput")
# ------------------------------------------------------------------------------
# 1) Data import, cleaning and preparation
# ------------------------------------------------------------------------------
# define locale for SNB imports
de_CH = locale(date_format = "%d.%m.%Y")
# 1.1 SARON
# Get data
url = "https://www.six-group.com/exchanges/downloads/indexdata/hsrron.csv"
response = GET(url)
data = content(response, "text")
# Save a cache of the data
timestamp = format(Sys.time(), "%Y%m%d-%H%M%S")
filename = paste0("../cache/SARON-", timestamp, ".csv")
write(data, file = filename)
# parse the file contents and save to objects
df = read_delim(data, delim = "; ", skip = 4,
col_types = "Dd", col_names = c("Date", "Value"),
locale = de_CH, col_select = c(1,2))
SARON = xts(df$Value, order.by = df$Date)
# ------------------------------------------------------------------------------
# 0) Packages and functions that we need
# ------------------------------------------------------------------------------
library(httr)
library(readr)
library(dplyr)
library(lubridate)
library(zoo)
library(purrr)
library(lmtest)
library(forecast)
library(tseries)
library(tsbox)
library(ggplot2)
library(CADFtest)
# clean objects
rm(list=ls())
# Load user-defined commands and packages
source("UserPackages.R")
# ------------------------------------------------------------------------------
# 0) Packages and functions that we need
# ------------------------------------------------------------------------------
library(httr)
library(readr)
library(dplyr)
library(lubridate)
library(zoo)
library(purrr)
library(lmtest)
library(forecast)
library(tseries)
library(tsbox)
library(ggplot2)
library(CADFtest)
# clean objects
rm(list=ls())
# Load user-defined commands and packages
source("UserPackages.R")
setwd("~/Library/CloudStorage/OneDrive-Personal/01 Economics/03 Semester 3 Classes/02 Applied Macroeconometrics/ExchangeRateForecasting")
# Load user-defined commands and packages
source("UserPackages.R")
# Create an output folder in the current directory
mainDir = getwd()
